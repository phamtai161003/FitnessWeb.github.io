@model FitnessProject.Models.Client

@{
    ViewBag.Title = "Create";
    Layout = "~/Areas/Admin/Views/Shared/admin_layout.cshtml";
}

<script>
    // Thêm mã JavaScript để kiểm soát dữ liệu đầu vào
    // Chỉ cho phép nhập số
    function onlyNumberKey(evt) {
        var ASCIICode = (evt.which) ? evt.which : evt.keyCode
        if (ASCIICode > 31 && (ASCIICode < 48 || ASCIICode > 57))
            return false;
        return true;
    }

    // Chỉ cho phép nhập số thập phân
    function onlyNumberKeyWithDecimal(evt) {
        var ASCIICode = (evt.which) ? evt.which : evt.keyCode
        if (ASCIICode > 31 && (ASCIICode != 46 && (ASCIICode < 48 || ASCIICode > 57)))
            return false;
        return true;
    }
</script>

<div class="container">
    <h2>Create</h2>
    <form method="post" enctype="multipart/form-data">
        @Html.AntiForgeryToken()

        <div class="form-group">
            @Html.LabelFor(model => model.Fullname, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Fullname, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Fullname, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.gender, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.gender, new List<SelectListItem>
                {
                    new SelectListItem { Text = "Nam", Value = "Nam" },
                    new SelectListItem { Text = "Nữ", Value = "Nữ" },
                    new SelectListItem { Text = "Khác", Value = "Khác" }
                }, "-- Chọn Giới Tính --", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.gender, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.birthday, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.birthday, new { htmlAttributes = new { @class = "form-control", type = "date" } })
                @Html.ValidationMessageFor(model => model.birthday, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.weight, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="input-group">
                    @Html.EditorFor(model => model.weight, new { htmlAttributes = new { @class = "form-control", type = "number", step = "any", onkeypress = "return onlyNumberKeyWithDecimal(event)" } })
                    <span class="input-group-addon">kg</span>
                </div>
                @Html.ValidationMessageFor(model => model.weight, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.height, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="input-group">
                    @Html.EditorFor(model => model.height, new { htmlAttributes = new { @class = "form-control", type = "number", onkeypress = "return onlyNumberKey(event)" } })
                    <span class="input-group-addon">cm</span>
                </div>
                @Html.ValidationMessageFor(model => model.height, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.anh, htmlAttributes: new { @class = "control-label" })
            <input type="file" name="images" id="file" class="form-control" />
            @Html.ValidationMessageFor(model => model.anh, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.phone, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.phone, new { htmlAttributes = new { @class = "form-control", onkeypress = "return onlyNumberKey(event)" } })
                @Html.ValidationMessageFor(model => model.phone, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.user_id, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.user_id, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.user_id, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <button type="submit" class="btn btn-primary">Create</button>
                @Html.ActionLink("Back to List", "Index", new { }, new { @class = "btn btn-default" })
            </div>
        </div>
    </form>
</div>
